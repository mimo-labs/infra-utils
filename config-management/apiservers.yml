---
- hosts: apiservers
  become: yes
  gather_facts: yes

  roles:
    - role: Dnsmasq
      tags: [ never, packer, dnsmasq ]
    - role: Nginx
      tags: [ never, packer, nginx ]
      vars:
        mockserver_nginx_hosts:
          mime-rocks:
    - role: Docker
      tags: [ never, packer, docker ]
      vars:
        mockserver_docker_namespace: mimo
        mockserver_docker_files_to_copy:
          - mimo_statics.conf
        mockserver_docker_networks:
          - mimo
        mockserver_docker_volumes:
          - mimo
        mockserver_docker_images:
          mockserver_admin:
            name: admin_api
            image: ldelelis/mockserver
            force_pull: yes
            tag: develop
            networks:
              - name: mimo
            mounts:
              - source: mimo
                target: /usr/src/app/mockserver/static
            labels:
              traefik.enable: "true"
              traefik.frontend.passHostHeaders: "true"
              traefik.http.services.mockserver_admin.loadbalancer.server.port: "8000"
              traefik.http.routers.mockserver_admin.rule: "Host(`dev.{{ lookup('env', 'MIMO_DOMAIN')}}`)"
            env:
              DATABASE_URL: "{{ lookup('env', 'MIMO_DATABASE_URL')}}"
              SENTRY_DSN: "{{ lookup('env', 'MIMO_SENTRY_DSN')}}"
              IS_ADMIN_API: "true"
            command: "gunicorn -w 4 --bind 0.0.0.0:8000 --log-level error --chdir ./mockserver mockserver.wsgi"
          mockserver_mocks:
            name: fetch_api
            image: ldelelis/mockserver
            force_pull: yes
            tag: develop
            networks:
              - name: mimo
            labels:
              traefik.enable: "true"
              traefik.frontend.passHostHeaders: "true"
              traefik.http.services.mockserver_mocks.loadbalancer.server.port: "8000"
              traefik.http.routers.mockserver_mocks.rule: "HostRegexp(`{org:[a-zA-Z0-9]+}.{proj:[a-zA-Z]+}.dev.{{lookup('env', 'MIMO_DOMAIN')}}`)"
            env:
              DATABASE_URL: "{{ lookup('env', 'MIMO_DATABASE_URL')}}"
              SENTRY_DSN: "{{ lookup('env', 'MIMO_SENTRY_DSN')}}"
              IS_ADMIN_API: "true"
            command: "gunicorn -w 4 --bind 0.0.0.0:8000 --log-level error --chdir ./mockserver mockserver.wsgi"
          celery:
            name: tasks
            image: ldelelis/mockserver
            tag: develop
            networks:
              - name: mimo
            env:
              CELERY_BROKER_URL: "{{ lookup('env', 'MIMO_REDIS_URL') }}"
              SENTRY_DSN: "{{ lookup('env', 'MIMO_SENTRY_DSN')}}"
            command: "celery worker -A mockserver --workdir mockserver -l info"
          redis:
            name: cache
            image: redis
            tag: 5
            networks:
              - name: mimo
          traefik:
            name: webserver
            image: traefik
            tag: v2.0
            ports:
              - "8000:80"
            networks:
              - name: mimo
            volumes:
              - "/var/run/docker.sock:/var/run/docker.sock"
            command: "--providers.docker"
          nginx:
            name: statics-webserver
            image: nginx
            tag: alpine
            networks:
              - name: mimo
            volumes:
              - "/usr/mimo_statics.conf:/etc/nginx/conf.d/default.conf"
            mounts:
              - source: mimo
                target: /static
            labels:
              traefik.enable: "true"
              traefik.frontend.passHostHeaders: "true"
              traefik.http.routers.nginx.rule: "Host(`dev.{{lookup('env', 'MIMO_DOMAIN')}}`) && PathPrefix(`/static`)"
            command: "nginx -g 'daemon off;'"
        ansible_python_interpreter: /usr/bin/python3
    - role: Letsencrypt
      tags: [ never, packer, letsencrypt ]
