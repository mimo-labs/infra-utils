- name: Load variables
  include_vars: "{{ env|default('prod') }}.yml"

- name: Ensure docker apt_key is applied
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Ensure docker's apt repo is applied
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present

- name: Ensures Docker-CE is installed
  apt:
    name: docker-ce
    state: present

- include_tasks: ./secure.yml
  when: mockserver_docker_secure_host is defined and mockserver_docker_secure_host

- name: Ensure user is able to run docker
  user:
    name: "{{ system_user }}"
    groups: docker
    append: yes

- name: Ensure requested files exist on host
  copy:
    src: "{{ item }}"
    dest: "/usr/{{ item }}"
  when: mockserver_docker_files_to_copy is defined
  loop: "{{ mockserver_docker_files_to_copy }}"

- name: Ensure user-defined networks exist
  docker_network:
    name: "{{ item }}"
    state: present
  when: mockserver_docker_networks is defined
  loop: "{{ mockserver_docker_networks }}"

- name: Ensure user-defined volumes exist
  docker_volume:
    name: "{{ item }}"
    recreate: never
    state: present
  when: mockserver_docker_volumes is defined
  loop: "{{ mockserver_docker_volumes }}"

- name: Ensure images are pulled
  docker_image:
    name: "{{ item.value.image }}:{{ item.value.tag }}"
    source: pull
  loop: "{{ mockserver_docker_images | default({}) | dict2items }}"

- name: Ensure images run on startup
  docker_container:
    name: "{{ mockserver_docker_namespace }}_{{ item.value.name }}"
    image: "{{ item.value.image }}:{{ item.value.tag }}"
    state: started
    restart_policy: always
    ports: "{{ item.value.ports | default([]) }}"
    command: "{{ item.value.command }}"
    env: "{{ item.value.env | default({}) }}"
    networks: "{{ item.value.networks | default([]) }}"
    labels: "{{ item.value.labels | default({}) }}"
    volumes: "{{ item.value.volumes | default([]) }}"
    mounts: "{{ item.value.mounts | default([]) }}"
  loop: "{{ mockserver_docker_images | default({}) | dict2items }}"
